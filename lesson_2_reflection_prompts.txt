What happens when you initialize a repository? Why do you need to do it?

It creates a new repository. It's needed if we have a new project so each project can go into different repositories.

How is the staging area different from the working directory and the repository?
The staging area might consist of parts of the files in the working directory as we might not want to commit all the files in the directory at once.

What value do you think it offers?
Better control of what's commited.

How can you use the staging area to make sure you have one commit per logical
change?
You can add only the files related to the change you want to commit to the staging area before commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
When the code is ready for production, branch that version and start working on new releases on a new branch.
This will make sure you know exactly what's in production. You can then work on new releases in other branches.

How do the diagrams help you visualize the branch structure?
Easier to see where the code splits up and how it's related.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
Different development paths be merged back into one while still maintaining the commit history.
Because they are merged into a common point.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
